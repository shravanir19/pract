#include <iostream>
#include <unordered_set>
class Set {
private:
 std::unordered_set<int> elements;
public:
 void Add(int element) {
 elements.insert(element);
 }
 void Remove(int element) {
 elements.erase(element);
 }
 bool Contains(int element) const {
 return elements.count(element) > 0;
 }
 int Size() const {
 return elements.size();
 }
 std::unordered_set<int> GetElements() const {
 return elements;
 }

 Set Intersection(const Set& other) const
 {
 Set intersectionSet;
 for (auto element : elements)
{
        if (other.Contains(element))
    {
        intersectionSet.Add(element);
    }
 }
 return intersectionSet;
 }


 Set Union(const Set& other) const {
 Set unionSet;
 unionSet.elements = elements;
 unionSet.elements.insert(other.elements.begin(),
other.elements.end());
 return unionSet;
 }


 Set Difference(const Set& other) const {
 Set differenceSet;
 for (auto element : elements) {
 if (!other.Contains(element)) {
 differenceSet.Add(element);
 }
 }
 return differenceSet;
 }


 bool Subset(const Set& other) const {
 for (auto element : elements) {
 if (!other.Contains(element)) {
 return false;
 }
 }
 return true;
 }
};
int main() {
 Set set1;
 set1.Add(1);
 set1.Add(2);
 set1.Add(3);
 Set set2;
 set2.Add(2);
 set2.Add(3);
 set2.Add(4);

 std::cout << "Set 1: ";
 for (auto element : set1.GetElements()) {
 std::cout << element << " ";
 }
 std::cout << std::endl;


 std::cout << "Set 2: ";
 for (auto element : set2.GetElements()) {
 std::cout << element << " ";
 }
 std::cout << std::endl;


 std::cout << "Intersection: ";
 Set intersectionSet = set1.Intersection(set2);
 for (auto element : intersectionSet.GetElements()) {
 std::cout << element << " ";
 }
 std::cout << std::endl;



 std::cout << "Union: ";
 Set unionSet = set1.Union(set2);
 for (auto element : unionSet.GetElements()) {
 std::cout << element << " ";
 }
 std::cout << std::endl;


 std::cout << "Difference: ";
 Set differenceSet = set1.Difference(set2);
 for (auto element : differenceSet.GetElements()) {
 std::cout << element << " ";
 }
 std::cout << std::endl;


 std::cout << "Subset: " << (set1.Subset(set2) ? "true" : "false") <<
std::endl;
 return 0;
}
